// Prisma Schema for MintChat
// PostgreSQL with pgvector extension for RAG

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  extensions = [vector]
}

// ============================================
// USER & AUTH
// ============================================

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  bots            Bot[]
  conversations   Conversation[]
  
  @@map("users")
}

// ============================================
// BOT & CONFIGURATION
// ============================================

model Bot {
  id        String   @id @default(cuid())
  name      String   @default("My Assistant")
  ownerId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Appearance Config
  primaryColor      String  @default("#17B26A")
  glowingBorder     Boolean @default(true)
  companyLogo       String?
  agentAvatar       String?
  showFloatingAvatar Boolean @default(true)
  title             String  @default("Chat with us")
  placeholder       String  @default("Ask me anything...")
  suggestedQuestions Json   @default("[]") // Array of strings

  // Relations
  owner             User              @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  trainingMaterials TrainingMaterial[]
  conversations     Conversation[]
  
  @@index([ownerId])
  @@map("bots")
}

// ============================================
// TRAINING MATERIALS & RAG
// ============================================

model TrainingMaterial {
  id        String   @id @default(cuid())
  botId     String
  type      MaterialType
  title     String
  source    String?  // URL or filename
  content   String   @db.Text
  characters Int     @default(0)
  status    TrainingStatus @default(UNTRAINED)
  lastTrained DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  bot       Bot       @relation(fields: [botId], references: [id], onDelete: Cascade)
  chunks    Chunk[]
  
  @@index([botId])
  @@index([status])
  @@map("training_materials")
}

enum MaterialType {
  FILE
  LINK
  TEXT
}

enum TrainingStatus {
  TRAINED
  UNTRAINED
  PROCESSING
  FAILED
}

// ============================================
// RAG CHUNKS & EMBEDDINGS
// ============================================

model Chunk {
  id         String   @id @default(cuid())
  materialId String
  content    String   @db.Text
  embedding  Unsupported("vector(1536)")? // OpenAI ada-002 dimension
  metadata   Json     @default("{}")
  createdAt  DateTime @default(now())

  // Relations
  material   TrainingMaterial @relation(fields: [materialId], references: [id], onDelete: Cascade)
  
  @@index([materialId])
  @@map("chunks")
}

// ============================================
// CONVERSATIONS & MESSAGES
// ============================================

model Conversation {
  id           String   @id @default(cuid())
  userId       String
  botId        String
  title        String
  preview      String   @default("")
  unread       Boolean  @default(false)
  lastActivity DateTime @default(now())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  bot          Bot       @relation(fields: [botId], references: [id], onDelete: Cascade)
  messages     Message[]
  
  @@index([userId])
  @@index([botId])
  @@index([lastActivity])
  @@map("conversations")
}

model Message {
  id             String   @id @default(cuid())
  conversationId String
  role           MessageRole
  content        String   @db.Text
  sources        Json     @default("[]") // Array of {title, url}
  createdAt      DateTime @default(now())

  // Relations
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  
  @@index([conversationId])
  @@index([createdAt])
  @@map("messages")
}

enum MessageRole {
  USER
  ASSISTANT
}

// ============================================
// USAGE TRACKING (for future billing)
// ============================================

model UsageLog {
  id        String   @id @default(cuid())
  userId    String
  botId     String
  type      UsageType
  count     Int      @default(1)
  metadata  Json     @default("{}")
  createdAt DateTime @default(now())

  @@index([userId])
  @@index([botId])
  @@index([createdAt])
  @@map("usage_logs")
}

enum UsageType {
  MESSAGE
  TOKEN
  TRAINING
}
