================================================================================
                    üöÄ MintChat - Ready Commands
                    COPY & PASTE DIRECTLY
================================================================================

üìã ALL COMMANDS READY TO USE - JUST COPY AND RUN

================================================================================
                        1Ô∏è‚É£ GIT SETUP & PUSH TO GITHUB
================================================================================

# Initialize Git
git init

# Add all files
git add .

# Commit
git commit -m "Initial MintChat deployment"

# Add remote (REPLACE YOUR_USERNAME with your GitHub username)
git remote add origin https://github.com/YOUR_USERNAME/mintchat.git

# Set main branch
git branch -M main

# Push to GitHub
git push -u origin main

================================================================================
                        2Ô∏è‚É£ POSTGRESQL QUERY (In Railway)
================================================================================

After adding PostgreSQL service, run this in Data ‚Üí Query:

CREATE EXTENSION IF NOT EXISTS vector;

================================================================================
                        3Ô∏è‚É£ GENERATE NEW JWT SECRET (Optional)
================================================================================

If you want to generate a new JWT secret instead of using the provided one:

# On Mac/Linux:
openssl rand -base64 32

# On Windows (PowerShell):
[Convert]::ToBase64String((1..32 | ForEach-Object { Get-Random -Maximum 256 }))

# Or use Node.js (works everywhere):
node -e "console.log(require('crypto').randomBytes(32).toString('base64'))"

================================================================================
                        4Ô∏è‚É£ LOCAL DEVELOPMENT SETUP
================================================================================

If you want to run locally before deploying:

# Install dependencies
npm install
cd server && npm install && cd ..

# Create server/.env file with your variables
# (Copy from RAILWAY_ENV_READY.txt)

# Generate Prisma client
cd server && npx prisma generate

# Push database schema
npx prisma db push

# Run frontend (Terminal 1)
npm run dev

# Run backend (Terminal 2)
npm run dev:server

# Visit: http://localhost:5173

================================================================================
                        5Ô∏è‚É£ DATABASE COMMANDS (Local)
================================================================================

# Generate Prisma client
cd server && npx prisma generate

# Push schema to database
cd server && npx prisma db push

# Open Prisma Studio (database GUI)
cd server && npx prisma studio

# Create migration
cd server && npx prisma migrate dev --name init

================================================================================
                        6Ô∏è‚É£ BUILD COMMANDS
================================================================================

# Build everything (frontend + backend)
npm run build:all

# Build frontend only
npm run build

# Build backend only
npm run build:server

# Start production server
npm start

================================================================================
                        7Ô∏è‚É£ RAILWAY CLI COMMANDS (Optional)
================================================================================

If you install Railway CLI:

# Install Railway CLI
npm install -g @railway/cli

# Login
railway login

# Link to project
railway link

# View logs
railway logs

# Connect to database
railway connect postgres

# Run command in Railway environment
railway run npm run db:studio

================================================================================
                        8Ô∏è‚É£ USEFUL GIT COMMANDS
================================================================================

# Check status
git status

# View changes
git diff

# Add specific file
git add filename.txt

# Commit with message
git commit -m "Your message"

# Push changes
git push

# Pull latest changes
git pull

# View commit history
git log --oneline

# Create new branch
git checkout -b feature-name

# Switch branch
git checkout main

================================================================================
                        9Ô∏è‚É£ TROUBLESHOOTING COMMANDS
================================================================================

# Check Node version
node --version

# Check npm version
npm --version

# Clear npm cache
npm cache clean --force

# Reinstall dependencies
rm -rf node_modules package-lock.json
npm install

# Check for outdated packages
npm outdated

# Update packages
npm update

================================================================================
                        üîü TESTING COMMANDS
================================================================================

# Test API health (replace URL with your Railway URL)
curl https://your-app.railway.app/api/health

# Test with verbose output
curl -v https://your-app.railway.app/api/health

# Test signup endpoint
curl -X POST https://your-app.railway.app/api/auth/signup \
  -H "Content-Type: application/json" \
  -d '{"name":"Test","email":"test@example.com","password":"password123"}'

================================================================================
                        üìä MONITORING COMMANDS
================================================================================

# Watch logs in real-time (if Railway CLI installed)
railway logs --follow

# Check disk usage
du -sh node_modules

# Check memory usage
free -h

# Check running processes
ps aux | grep node

================================================================================
                        üéØ QUICK REFERENCE
================================================================================

Most Common Commands:

1. Push to GitHub:
   git add . && git commit -m "Update" && git push

2. Local development:
   npm run dev (Terminal 1)
   npm run dev:server (Terminal 2)

3. Build for production:
   npm run build:all

4. Database update:
   cd server && npx prisma db push

5. View database:
   cd server && npx prisma studio

================================================================================
                        üí° TIPS
================================================================================

1. Always commit before making big changes:
   git add . && git commit -m "Backup before changes"

2. Test locally before pushing:
   npm run dev

3. Check logs if something fails:
   Railway Dashboard ‚Üí Deployments ‚Üí View Logs

4. Keep dependencies updated:
   npm update

5. Use .gitignore to avoid committing:
   - node_modules/
   - .env files
   - dist/ folders

================================================================================

Ready to deploy! üöÄ

For detailed instructions, see:
- DEPLOYMENT_STEPS_ARABIC.md (Step-by-step guide)
- QUICK_DEPLOY_CHECKLIST.md (Quick checklist)
- RAILWAY_ENV_READY.txt (Environment variables)

================================================================================
